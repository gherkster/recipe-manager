// <auto-generated />
using System;
using API.Models.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-preview.2.22153.1");

            modelBuilder.Entity("API.Models.Database.DbCategory", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("Label");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("API.Models.Database.DbCuisine", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("Label");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("API.Models.Database.DbCustomTimeLabel", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("Label");

                    b.ToTable("CustomTimeTypes");
                });

            modelBuilder.Entity("API.Models.Database.DbImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("BinaryData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DbImage");
                });

            modelBuilder.Entity("API.Models.Database.DbIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DbRecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DbRecipeId");

                    b.ToTable("DbIngredient");
                });

            modelBuilder.Entity("API.Models.Database.DbInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DbRecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DbRecipeId");

                    b.ToTable("DbInstruction");
                });

            modelBuilder.Entity("API.Models.Database.DbRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Carbohydrates")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryLabel")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("CookingTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CuisineLabel")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("CustomTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomTimeLabelLabel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Energy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Fat")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("PreparationTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Protein")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rating")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServingTypeLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Servings")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Sodium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryLabel");

                    b.HasIndex("CuisineLabel");

                    b.HasIndex("CustomTimeLabelLabel");

                    b.HasIndex("ImageId");

                    b.HasIndex("ServingTypeLabel");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("API.Models.Database.DbServingType", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("Label");

                    b.ToTable("ServingTypes");
                });

            modelBuilder.Entity("API.Models.Database.DbTag", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("Label");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DbRecipeDbTag", b =>
                {
                    b.Property<int>("RecipesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagsLabel")
                        .HasColumnType("TEXT");

                    b.HasKey("RecipesId", "TagsLabel");

                    b.HasIndex("TagsLabel");

                    b.ToTable("DbRecipeDbTag");
                });

            modelBuilder.Entity("API.Models.Database.DbIngredient", b =>
                {
                    b.HasOne("API.Models.Database.DbRecipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("DbRecipeId");
                });

            modelBuilder.Entity("API.Models.Database.DbInstruction", b =>
                {
                    b.HasOne("API.Models.Database.DbRecipe", null)
                        .WithMany("Instructions")
                        .HasForeignKey("DbRecipeId");
                });

            modelBuilder.Entity("API.Models.Database.DbRecipe", b =>
                {
                    b.HasOne("API.Models.Database.DbCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryLabel");

                    b.HasOne("API.Models.Database.DbCuisine", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineLabel");

                    b.HasOne("API.Models.Database.DbCustomTimeLabel", "CustomTimeLabel")
                        .WithMany("Recipes")
                        .HasForeignKey("CustomTimeLabelLabel");

                    b.HasOne("API.Models.Database.DbImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("API.Models.Database.DbServingType", "ServingType")
                        .WithMany()
                        .HasForeignKey("ServingTypeLabel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Cuisine");

                    b.Navigation("CustomTimeLabel");

                    b.Navigation("Image");

                    b.Navigation("ServingType");
                });

            modelBuilder.Entity("DbRecipeDbTag", b =>
                {
                    b.HasOne("API.Models.Database.DbRecipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Database.DbTag", null)
                        .WithMany()
                        .HasForeignKey("TagsLabel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Database.DbCustomTimeLabel", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("API.Models.Database.DbRecipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Instructions");
                });
#pragma warning restore 612, 618
        }
    }
}
